{"ast":null,"code":"var _jsxFileName = \"/home/nonseodion/Desktop/Codes/ETHLagos/ipfs-inbox/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport IPFSInbox from \"./contracts/IPFSInbox.json\";\nimport getWeb3 from \"./getWeb3\";\nimport ipfs from \"./ipfs\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = IPFSInbox.networks[networkId];\n        const instance = new web3.eth.Contract(IPFSInbox.abi, deployedNetwork && deployedNetwork.address); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          web3,\n          accounts,\n          contract: instance\n        });\n        this.setEventListeners();\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.captureFile = event => {\n      event.stopPropagation();\n      event.preventDefault();\n      const file = event.target.files[0];\n      const reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = () => this.convertToBuffer(reader);\n    };\n\n    this.convertToBuffer = async reader => {\n      const buffer = await Buffer.from(reader.result);\n      this.setState({\n        buffer\n      });\n    };\n\n    this.onIPFSSubmit = async event => {\n      event.preventDefault();\n      await ipfs.add(this.state.buffer, (err, ipfsHash) => {\n        console.log(err, ipfsHash);\n        this.setState({\n          ipfsHash: ipfsHash[0].hash\n        });\n      });\n    };\n\n    this.state = {\n      storageValue: 0,\n      web3: null,\n      accounts: null,\n      contract: null,\n      ipfsHash: null,\n      formIPFS: \"\",\n      formAddress: \"\",\n      receivedIPFS: \"\"\n    };\n    this.handleChangeAddress = this.handleChangeAddress.bind(this);\n    this.handleChangeIPFS = this.handleChangeIPFS.bind(this);\n    this.handleSend = this.handleSend.bind(this);\n    this.handleReceiveIPFS = this.handleReceiveIPFS.bind(this);\n  }\n\n  setEventListeners() {\n    this.state.contract.inboxResponse().on(\"data\", result => {\n      this.setState({\n        receivedIPFS: result.args[0]\n      });\n    });\n  }\n\n  handleChangeAddress(event) {\n    this.setState({\n      formAddress: event.target.value\n    });\n  }\n\n  handleChangeIPFS(event) {\n    this.setState({\n      formIPFS: event.target.value\n    });\n  }\n\n  handleSend(event) {\n    event.preventDefault();\n    const contract = this.state.contract;\n    const account = this.state.accounts[0];\n    document.getElementById(\"new-notification-form\").requestFullscreen();\n    this.setState({\n      showNotification: true\n    });\n    contract.sendIPFS(this.state.formAddress, this.state.formIPFS, {\n      from: account\n    }).then(result => {\n      this.setState({\n        formAddress: \"\"\n      });\n      this.setState({\n        formIPFS: \"\"\n      });\n    });\n  }\n\n  handleReceiveIPFS(event) {\n    event.preventDefault();\n    const contract = this.state.contract;\n    const account = this.state.accounts[0];\n    contract.checkInbox({\n      from: account\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \" 1. Add a file to IPFS here.\"), React.createElement(\"form\", {\n      id: \"ipfs-hash-form\",\n      className: \"scep-form\",\n      onSubmit: this.onIPFSSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"file\",\n      onChange: this.captureFile,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \"Send it\")), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \" The IPFS hash is: \", this.state.ipfsHash), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \" 2. Send notifications here \"), React.createElement(\"form\", {\n      id: \"new-notification-form\",\n      className: \"scep-form\",\n      onSubmit: this.handleSend,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \"Receiver Address:\", React.createElement(\"input\", {\n      type: \"text\",\n      value: this.state.value,\n      onChange: this.handleChangeAddress,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    })), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"IPFS Address:\", React.createElement(\"input\", {\n      type: \"text\",\n      value: this.state.value,\n      onChange: this.handleChangeIPFS,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    })), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    })), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, \" 3. Receive Notifications \"), React.createElement(\"button\", {\n      onClick: this.handleReceiveIPFS,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \"Receive IPFS\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, this.state.receivedIPFS));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/nonseodion/Desktop/Codes/ETHLagos/ipfs-inbox/client/src/App.js"],"names":["React","Component","IPFSInbox","getWeb3","ipfs","App","constructor","props","componentDidMount","web3","accounts","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","setState","contract","setEventListeners","error","alert","console","captureFile","event","stopPropagation","preventDefault","file","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","convertToBuffer","buffer","Buffer","from","result","onIPFSSubmit","add","state","err","ipfsHash","log","hash","storageValue","formIPFS","formAddress","receivedIPFS","handleChangeAddress","bind","handleChangeIPFS","handleSend","handleReceiveIPFS","inboxResponse","on","args","value","account","document","getElementById","requestFullscreen","showNotification","sendIPFS","then","checkInbox","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport IPFSInbox from \"./contracts/IPFSInbox.json\";\nimport getWeb3 from \"./getWeb3\";\nimport ipfs from \"./ipfs\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  \n  constructor(props){\n    super(props);\n    this.state = { \n      storageValue: 0, \n      web3: null, \n      accounts: null, \n      contract: null, \n      ipfsHash: null,       \n      formIPFS: \"\",\n      formAddress: \"\",\n      receivedIPFS: \"\" \n    };\n    \n    this.handleChangeAddress = this.handleChangeAddress.bind(this);\n    this.handleChangeIPFS = this.handleChangeIPFS.bind(this);\n    this.handleSend = this.handleSend.bind(this);\n    this.handleReceiveIPFS = this.handleReceiveIPFS.bind(this);\n  }\n  \n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = IPFSInbox.networks[networkId];\n      const instance = new web3.eth.Contract(\n        IPFSInbox.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance });\n      this.setEventListeners();\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  captureFile = (event) => {\n    event.stopPropagation();\n    event.preventDefault();\n    const file = event.target.files[0];\n    const reader = new window.FileReader();\n    reader.readAsArrayBuffer(file);\n    reader.onloadend = () => this.convertToBuffer(reader);\n  }\n\n  convertToBuffer = async (reader) => {\n    const buffer = await Buffer.from(reader.result);\n    this.setState({buffer});\n  }\n\n  onIPFSSubmit = async (event) => {\n    event.preventDefault();\n    await ipfs.add(this.state.buffer, (err, ipfsHash) => {\n      console.log(err, ipfsHash);\n      this.setState({ipfsHash: ipfsHash[0].hash});\n    })\n  }\n\n  setEventListeners(){\n    this.state.contract.inboxResponse()\n      .on(\"data\", result => {\n        this.setState({receivedIPFS: result.args[0]});\n      })\n  }\n\n  handleChangeAddress(event){\n    this.setState({formAddress: event.target.value});\n  }\n\n  handleChangeIPFS(event){\n    this.setState({formIPFS: event.target.value});\n  }\n\n  handleSend(event){\n    event.preventDefault();\n    const contract = this.state.contract;\n    const account = this.state.accounts[0];\n\n    document.getElementById(\"new-notification-form\").requestFullscreen();\n    this.setState({showNotification: true});\n    contract.sendIPFS(this.state.formAddress, this.state.formIPFS, {from: account})\n      .then( result => {\n        this.setState({formAddress: \"\"});\n        this.setState({formIPFS: \"\"});\n      })\n  }\n\n  handleReceiveIPFS(event){\n    event.preventDefault();\n    const contract = this.state.contract;\n    const account = this.state.accounts[0];\n    contract.checkInbox({from: account});\n  }\n\n  render() {\n    return(\n      <div className=\"App\">\n        <h2> 1. Add a file to IPFS here.</h2>\n        <form id=\"ipfs-hash-form\" className=\"scep-form\" onSubmit={this.onIPFSSubmit}>\n            <input \n              type=\"file\"\n              onChange={this.captureFile}\n            />\n            <button\n              type=\"submit\"> \n              Send it \n            </button>\n          </form>\n          <p> The IPFS hash is: {this.state.ipfsHash}</p>\n        <h2> 2. Send notifications here </h2>\n          <form id=\"new-notification-form\" className=\"scep-form\" onSubmit={this.handleSend}>\n            <label>\n              Receiver Address:\n              <input type=\"text\" value={this.state.value} onChange={this.handleChangeAddress} />\n            </label>\n            <label>\n              IPFS Address:\n              <input type=\"text\" value={this.state.value} onChange={this.handleChangeIPFS} />\n            </label>\n            <input type=\"submit\" value=\"Submit\" />\n          </form>\n\n        <h2> 3. Receive Notifications </h2>\n          <button onClick={this.handleReceiveIPFS}>Receive IPFS</button>\n          <p>{this.state.receivedIPFS}</p>\n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}