{"ast":null,"code":"import Web3 from \"web3\";\n\nconst getWeb3 = () => new Promise(async (resolve, reject) => {\n  // Wait for loading completion to avoid race conditions with web3 injection timing.\n  // Modern dapp browsers...\n  debugger;\n\n  if (window.ethereum) {\n    const web3 = new Web3(window.ethereum);\n\n    try {\n      // Request account access if needed\n      await window.ethereum.enable(); // Acccounts now exposed\n\n      resolve(web3);\n    } catch (error) {\n      reject(error);\n    }\n  } // Legacy dapp browsers...\n  else if (window.web3) {\n      // Use Mist/MetaMask's provider.\n      const web3 = window.web3;\n      console.log(\"Injected web3 detected.\");\n      resolve(web3);\n    } // Fallback to localhost; use dev console port by default...\n    else {\n        const provider = new Web3.providers.HttpProvider(\"http://127.0.0.1:8545\");\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n});\n\nexport default getWeb3;","map":{"version":3,"sources":["/home/nonseodion/Desktop/Codes/ETHLagos/ipfs-inbox/client/src/getWeb3.js"],"names":["Web3","getWeb3","Promise","resolve","reject","window","ethereum","web3","enable","error","console","log","provider","providers","HttpProvider"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;;AAEA,MAAMC,OAAO,GAAG,MACd,IAAIC,OAAJ,CAAY,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AACrC;AACE;AACA;;AACA,MAAIC,MAAM,CAACC,QAAX,EAAqB;AACnB,UAAMC,IAAI,GAAG,IAAIP,IAAJ,CAASK,MAAM,CAACC,QAAhB,CAAb;;AACA,QAAI;AACF;AACA,YAAMD,MAAM,CAACC,QAAP,CAAgBE,MAAhB,EAAN,CAFE,CAGF;;AACAL,MAAAA,OAAO,CAACI,IAAD,CAAP;AACD,KALD,CAKE,OAAOE,KAAP,EAAc;AACdL,MAAAA,MAAM,CAACK,KAAD,CAAN;AACD;AACF,GAVD,CAWA;AAXA,OAYK,IAAIJ,MAAM,CAACE,IAAX,EAAiB;AACpB;AACA,YAAMA,IAAI,GAAGF,MAAM,CAACE,IAApB;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAR,MAAAA,OAAO,CAACI,IAAD,CAAP;AACD,KALI,CAML;AANK,SAOA;AACH,cAAMK,QAAQ,GAAG,IAAIZ,IAAI,CAACa,SAAL,CAAeC,YAAnB,CACf,uBADe,CAAjB;AAGA,cAAMP,IAAI,GAAG,IAAIP,IAAJ,CAASY,QAAT,CAAb;AACAF,QAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACAR,QAAAA,OAAO,CAACI,IAAD,CAAP;AACD;AACJ,CA/BD,CADF;;AAkCA,eAAeN,OAAf","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise(async (resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n      // Modern dapp browsers...\n      debugger;\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n  });\n\nexport default getWeb3;\n"]},"metadata":{},"sourceType":"module"}